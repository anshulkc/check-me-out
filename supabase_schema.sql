-- SUPABASE DATABASE SCHEMA FOR CHECKMEOUT APP

-- Enable RLS (Row Level Security)
alter table auth.users enable row level security;

-- Create user profiles table
create table public.profiles (
    id uuid references auth.users(id) primary key,
    username text not null,
    avatar_url text,
    total_points integer default 0,
    created_at timestamp with time zone default now()
);

-- Create scan logs table
create table public.scan_logs (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id) not null,
    timestamp timestamp with time zone not null,
    body_fat_percentage double precision not null,
    lean_muscle_percentage double precision not null,
    visceral_fat_level text not null,
    front_image_url text,
    side_image_url text,
    created_at timestamp with time zone default now()
);

-- Create feed items table
create table public.feed_items (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id) not null,
    username text not null,
    user_avatar_url text,
    activity_type text not null,
    timestamp timestamp with time zone not null,
    image_url text,
    likes integer default 0,
    comments integer default 0,
    points integer default 0,
    caption text,
    created_at timestamp with time zone default now()
);

-- Create roasts (comments) table
create table public.roasts (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id) not null,
    feed_item_id bigint references public.feed_items(id) not null,
    text text,
    image_url text,
    likes integer default 0,
    created_at timestamp with time zone default now()
);

-- Create likes table for tracking user likes
create table public.likes (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id) not null,
    feed_item_id bigint references public.feed_items(id) not null,
    created_at timestamp with time zone default now(),
    -- Add unique constraint to prevent duplicate likes
    unique(user_id, feed_item_id)
);

-- Create completed challenges table
create table public.completed_challenges (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id) not null,
    challenge_title text not null,
    completed_at timestamp with time zone default now(),
    -- Add unique constraint to prevent duplicate completions
    unique(user_id, challenge_title)
);

-- Create function to increment likes count
create or replace function increment_likes(item_id bigint)
returns void as $$
begin
  update public.feed_items
  set likes = likes + 1
  where id = item_id;
end;
$$ language plpgsql security definer;

-- Create function to decrement likes count
create or replace function decrement_likes(item_id bigint)
returns void as $$
begin
  update public.feed_items
  set likes = likes - 1
  where id = item_id;
end;
$$ language plpgsql security definer;

-- Create function to increment comments count
create or replace function increment_comments(item_id bigint)
returns void as $$
begin
  update public.feed_items
  set comments = comments + 1
  where id = item_id;
end;
$$ language plpgsql security definer;

-- Row level security policies
-- Profiles can be read by anyone but only updated by the user who owns the profile
alter table public.profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using (true);

create policy "Users can update their own profiles."
  on profiles for update
  using (auth.uid() = id);

-- Scan logs can only be read/written by the user who created them
alter table public.scan_logs enable row level security;

create policy "Scan logs are viewable by owner only."
  on scan_logs for select
  using (auth.uid() = user_id);
  
create policy "Scan logs can be inserted by owner only."
  on scan_logs for insert
  with check (auth.uid() = user_id);
  
create policy "Scan logs can be updated by owner only."
  on scan_logs for update
  using (auth.uid() = user_id);
  
create policy "Scan logs can be deleted by owner only."
  on scan_logs for delete
  using (auth.uid() = user_id);

-- Feed items can be read by anyone but only created/updated by the user who owns them
alter table public.feed_items enable row level security;

create policy "Feed items are viewable by everyone."
  on feed_items for select
  using (true);
  
create policy "Feed items can be inserted by owner only."
  on feed_items for insert
  with check (auth.uid() = user_id);
  
create policy "Feed items can be updated by owner only."
  on feed_items for update
  using (auth.uid() = user_id);

-- Roasts can be read by anyone but only created by authenticated users
alter table public.roasts enable row level security;

create policy "Roasts are viewable by everyone."
  on roasts for select
  using (true);
  
create policy "Roasts can be inserted by authenticated users."
  on roasts for insert
  with check (auth.uid() = user_id);

-- Likes can be read by anyone but only created/deleted by the user who made them
alter table public.likes enable row level security;

create policy "Likes are viewable by everyone."
  on likes for select
  using (true);
  
create policy "Likes can be inserted by authenticated users."
  on likes for insert
  with check (auth.uid() = user_id);
  
create policy "Likes can be deleted by the user who made them."
  on likes for delete
  using (auth.uid() = user_id);

-- Completed challenges can be read by their owner and created/updated by their owner
alter table public.completed_challenges enable row level security;

create policy "Completed challenges are viewable by owner only."
  on completed_challenges for select
  using (auth.uid() = user_id);
  
create policy "Completed challenges can be inserted by owner only."
  on completed_challenges for insert
  with check (auth.uid() = user_id);

-- Create storage buckets for images
-- Note: This needs to be run in the Supabase dashboard or via API

-- Storage bucket policies
-- These need to be set up in the Supabase dashboard
